{
  "name": "v8-debug",
  "version": "0.5.4",
  "description": "v8 debugger extending API",
  "homepage": "http://github.com/node-inspector/v8-debug",
  "author": {
    "name": "3y3 Ghoti",
    "email": "3y3@bk.ru"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/node-inspector/v8-debug.git"
  },
  "license": {
    "name": "BSD",
    "url": "https://github.com/node-inspector/v8-debug/blob/master/LICENSE"
  },
  "binary": {
    "module_name": "debug",
    "module_path": "./build/{module_name}/v{version}/{node_abi}-{platform}-{arch}/",
    "remote_path": "./{module_name}/v{version}/",
    "package_name": "{node_abi}-{platform}-{arch}.tar.gz",
    "host": "https://node-inspector.s3.amazonaws.com/"
  },
  "keywords": [
    "v8",
    "debugger"
  ],
  "engines": {
    "node": ">=0.10"
  },
  "main": "v8-debug",
  "dependencies": {
    "nan": "^2.0.4",
    "node-pre-gyp": "^0.6.5"
  },
  "devDependencies": {
    "aws-sdk": "^2.1.8",
    "mocha": "^2.1.0",
    "chai": "^1.10.0"
  },
  "scripts": {
    "preinstall": " ",
    "install": "node-pre-gyp install --fallback-to-build",
    "test": "mocha --debug"
  },
  "readme": "[![Build Status](https://travis-ci.org/node-inspector/v8-debug.svg?branch=master)](https://travis-ci.org/node-inspector/v8-debug)\n[![Build status](https://ci.appveyor.com/api/projects/status/rb02h15b61xyryhx/branch/master?svg=true)](https://ci.appveyor.com/project/3y3/v8-debug-145/branch/master)\n[![npm version](https://badge.fury.io/js/v8-debug.svg)](http://badge.fury.io/js/v8-debug)\n\n# v8-debug\nProvides extending API for [node](http://github.com/ry/node) internal debugger protocol (based on [v8 debugger protocol](https://code.google.com/p/v8/wiki/DebuggerProtocol))\n\nThis is a part of [node-inspector](http://github.com/node-inspector/node-inspector).\n\n## Installation\n```\nnpm install v8-debug\n```\n## API\n\n### registerCommand(name, callback)\nRegisters new debug processor command, like `lookup`.\n\n`callback` accepts two arguments - **request** and **response**.\n\nYou need to modify `response.body` if you want to return something to caller.\n```js\ndebug.registerCommand('_lookup', function(request, response) {\n  var test = request.attributes;\n  //do someting here\n  //and modify response\n  response.body = {\n    test: test\n  };\n});\n```\n\n### registerEvent(eventName)\nThis is a shortcut for:\n```js\ndebug.registerCommand('someEvent', debug.commandToEvent);\n```\n\n### execCommand(commandName, attributes)\nCalls debug processor command like 'lookup'.\n\n`attributes` will be passed to `registerCommand.callback` as `request.attributes`.\n\n`attributes` needs to be valid JSON object.\n```js\ndebug.registerCommand('_lookup', function(request, response) {\n  var test = request.attributes;\n  //do someting here\n  //and modify response\n  response.body = {\n    test: test\n  };\n});\n\ndebug.execCommand('_lookup', { attr: 'test' });\n```\n\n### emitEvent(eventName, attributes)\nThis is a semantic alias for `execCommand`\n```js\ndebug.emitEvent('myEvent', { attr: 'test' });\n```\n\n### commandToEvent(request, response)\n`response` object has a different structure for commands and events.\n\nBy default `registerCommand.callback` receives command's response.\n\nThis is a small converter.\n```js\ndebug.registerCommand('someEvent1', function(request, response) {\n  debug.commandToEvent(request, response);\n});\n\ndebug.registerCommand('someEvent2', debug.commandToEvent);\n```\nUse `debug.registerEvent` instead of this.\n\n### runInDebugContext(script)\n(alias `get`)\n\nEvaluates string or function (will be stringifyed) in debug context.\n```js\nvar MakeMirror = debug.get('MakeMirror');\nvar mirror = MakeMirror({ test: 1 });\n```\n\n### getFromFrame(index, value)\nTries to receive a `value` from targeted frame scopes\n```js\nfunction a(options) {\n  //...\n  b();\n}\n\nfunction b() {\n  // There is no info about `options` object\n  var options = debug.getFromFrame(1, 'options');\n}\n```\n\n### enableWebkitProtocol()\nEnables experimental usage of WebKit protocol\n\n### registerAgentCommand(command, parameters, callback)\nExperimental method for registering WebKit protocol handlers\n\n## Usage\n\nSimple console.log checking\n```js\nvar debug = require('v8-debug');\n\ndebug.registerEvent('console.log');\n\nconsole.log = (function(fn) {\n  return function() {\n    debug.emitEvent('console.log', {message: arguments[0]} /*, userdata*/);\n    return fn.apply(console, arguments);\n  }\n} (console.log));\n```\n\nFor more experience see [protocol documentation](https://github.com/buggerjs/bugger-v8-client/blob/master/PROTOCOL.md)\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/node-inspector/v8-debug/issues"
  },
  "_id": "v8-debug@0.5.4",
  "_from": "v8-debug@>=0.5.0 <0.6.0"
}
