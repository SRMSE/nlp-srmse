{
  "name": "node-inspector",
  "version": "0.12.3",
  "description": "Web Inspector based nodeJS debugger",
  "homepage": "http://github.com/node-inspector/node-inspector",
  "author": {
    "name": "Danny Coates",
    "email": "dannycoates@gmail.com"
  },
  "keywords": [
    "debug",
    "debugger",
    "inspector",
    "profiler"
  ],
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/node-inspector/node-inspector.git"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "bin": {
    "node-inspector": "./bin/inspector.js",
    "node-debug": "./bin/node-debug.js"
  },
  "dependencies": {
    "async": "~0.9",
    "biased-opener": "~0.2.2",
    "debug": "^2.2.0",
    "express": "^4.12.3",
    "glob": "^5.0.5",
    "path-is-absolute": "^1.0.0",
    "rc": "^1.0.1",
    "semver": "^4.3.4",
    "serve-favicon": "^2.1.1",
    "strong-data-uri": "^1.0.0",
    "v8-debug": "~0.5.0",
    "v8-profiler": "~5.3.0",
    "which": "^1.1.1",
    "ws": "^0.8.0",
    "yargs": "^3.9.0"
  },
  "devDependencies": {
    "promise": "^7.0.3",
    "mocha": "^1.21",
    "chai": "^2.1",
    "jshint": "^2.4.4",
    "fs-extra": "~0.8.1"
  },
  "preferGlobal": true,
  "scripts": {
    "pretest": "jshint .",
    "test": "mocha",
    "generate-front-end": "node --harmony tools/generate-front-end"
  },
  "readme": "# Node Inspector\n\n[![Build Status](https://travis-ci.org/node-inspector/node-inspector.png?branch=master)](https://travis-ci.org/node-inspector/node-inspector)\n[![NPM version](https://badge.fury.io/js/node-inspector.png)](http://badge.fury.io/js/node-inspector)\n[![Bountysource](https://www.bountysource.com/badge/tracker?tracker_id=195817)](https://www.bountysource.com/trackers/195817-node-inspector?utm_source=195817&utm_medium=shield&utm_campaign=TRACKER_BADGE)\n\n[![Join the chat at https://gitter.im/node-inspector/node-inspector](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/node-inspector/node-inspector?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n## Overview\n\nNode Inspector is a debugger interface for Node.js applications that uses the\nBlink Developer Tools (formerly WebKit Web Inspector).\n\nThe project maintenance and support is sponsored by\n[StrongLoop](http://strongloop.com).\n\n### Table of Content\n\n * [Quick Start](#quick-start)\n * [Features](#features)\n * [Known Issues](#known-issues)\n * [Troubleshooting](#troubleshooting)\n * [Advanced Use](#advanced-use)\n * [Configuration](#configuration)\n * [Contributing](#contributing-code)\n * [Credits](#credits)\n\n## Quick Start\n\n#### Install\n\n```sh\n$ npm install -g node-inspector\n```\n\n#### Start\n\n```sh\n$ node-debug app.js\n```\n\nwhere ```app.js``` is the name of your main Node application JavaScript file.\n\nSee available configuration options [here](https://github.com/node-inspector/node-inspector#configuration)\n\n#### Debug\n\nThe `node-debug` command will load Node Inspector in your default browser.\n\n> **NOTE:** Node Inspector works in Chrome and Opera only. You have to re-open\nthe inspector page in one of those browsers if another browser\nis your default web browser (e.g. Safari or Internet Explorer).\n\nNode Inspector works almost exactly as the Chrome Developer Tools. Read the\nexcellent\n[DevTools overview](https://developer.chrome.com/devtools/index)\nto get started.\n\nOther useful resources:\n - Documentation specific to Node Inspector provided by StrongLoop:\n  [Debugging with Node Inspector](http://docs.strongloop.com/display/SLC/Debugging+applications)\n - Miroslav's talk\n  [How to Debug Node Apps with Node Inspector](https://vimeo.com/77870960)\n - Danny's [screencasts](http://www.youtube.com/view_play_list?p=A5216AC29A41EFA8)\n   (most likely outdated by now)\n - [Getting Started from scratch](http://github.com/node-inspector/node-inspector/wiki/Getting-Started---from-scratch)\n   on wiki (most likely outdated by now)\n\n## Features\n\nThe Blink DevTools debugger is a powerful JavaScript debugger interface.\nNode Inspector supports almost all of the debugging features of DevTools, including:\n\n* Navigate in your source files\n* Set breakpoints (and specify trigger conditions)\n* Step over, step in, step out, resume (continue)\n* Inspect scopes, variables, object properties\n* Hover your mouse over an expression in your source to display its value in\n  a tooltip\n* Edit variables and object properties\n* Continue to location\n* Break on exceptions\n* Disable/enable all breakpoints\n* CPU and HEAP profiling\n* Network client requests inspection\n* Console output inspection\n\n### Cool stuff\n* Node Inspector uses WebSockets, so no polling for breaks.\n* Remote debugging\n* [Live edit of running code](http://github.com/node-inspector/node-inspector/wiki/LiveEdit),\n  optionally persisting changes back to the file-system.\n* Set breakpoints in files that are not loaded into V8 yet - useful for\n  debugging module loading/initialization.\n* Embeddable in other applications - see [Embedding HOWTO](docs/embedding.md)\n  for more details.\n\n## Known Issues\n\n* If there are symlink cycles then the [glob](https://github.com/isaacs/node-glob)\n  module may take a long time to return results causing long delays at startup.\n  The workaround is to disable preloading of scripts with `--no-preload`.\n* Be careful about viewing the contents of Buffer objects,\n  each byte is displayed as an individual array element;\n  for most Buffers this will take too long to render.\n* While not stopped at a breakpoint the console doesn't always\n  behave as you might expect. See the\n  [issue #146](https://github.com/node-inspector/node-inspector/issues/146).\n* Break on uncaught exceptions does not work in all Node versions,\n  you need at least v0.11.3 (see\n  [node#5713](https://github.com/joyent/node/pull/5713)).\n* Debugging multiple processes (e.g. cluster) is cumbersome.\n  Read the following blog post for instructions:\n  [Debugging Clustered Apps with Node-Inspector](http://strongloop.com/strongblog/whats-new-nodejs-v0-12-debugging-clusters/)\n\n## Troubleshooting\n\n#### My script runs too fast to attach the debugger.\n\nThe debugged process must be started with `--debug-brk`, this way the script is paused on the first line.\n\nNote: `node-debug` adds this option for you by default.\n\n#### I got the UI in a weird state.\n\nWhen in doubt, refresh the page in browser\n\n#### Can I debug remotely?\n\nYes. Node Inspector must be running on the same machine, but your browser can be anywhere.\nJust make sure port 8080 is accessible.\n\n#### How do I specify files to hide?\n\nCreate a JSON-encoded array.  You must escape quote characters when using a command-line option.\n\n```sh\n$ node-inspector --hidden='[\"node_modules/framework\"]'\n```\n\nNote that the array items are interpreted as regular expressions.\n\n#### UI doesn't load or doesn't work and refresh didn't help\n\nMake sure that you have adblock disabled as well as any other content blocking scripts and plugins.\n\n#### How can I (selectively) delete debug session metadata?\n\nYou may want to delete debug session metadata if for example Node Inspector gets in a bad state with some\nwatch variables that were function calls (possibly into some special c-bindings).  In such cases, even restarting\nthe application/debug session may not fix the problem.\n\nNode Inspector stores debug session metadata in the HTML5 local storage.\nYou can inspect the contents of local storage and remove any items as\nneeded. In Google Chrome, you can execute any of the following in the JavaScript console:\n\n```js\n// Remove all\nwindow.localStorage.clear()\n// Or, to list keys so you can selectively remove them with removeItem()\nwindow.localStorage\n// Remove all the watch expressions\nwindow.localStorage.removeItem('watchExpressions')\n// Remove all the breakpoints\nwindow.localStorage.removeItem('breakpoints')\n```\n\nWhen you are done cleaning up, hit refresh in the browser.\n\n#### Node Inspector takes a long time to start up.\n\nTry setting --no-preload to true. This option disables searching disk for *.js at startup.\nCode will still be loaded into Node Inspector at runtime, as modules are required.\n\n#### How do I debug Mocha unit-tests?\n\nYou have to start `_mocha` as the debugged process and make sure\nthe execution pauses on the first line. This way you have enough\ntime to set your breakpoints before the tests are run.\n\n```sh\n$ node-debug _mocha\n```\n\n#### How do I debug Gulp tasks?\n\nIf you are running on a Unix system you can simply run the following command.\nThe `$(which ..)` statement gets replaced with the full path to the gulp-cli.\n\n```sh\n$ node-debug $(which gulp) task\n```\n\nIf you are running on Windows, you have to get the full path of `gulp.js`\nto make an equivalent command:\n\n```sh\n> node-debug %appdata%\\npm\\node_modules\\gulp\\bin\\gulp.js task\n```\n*You can omit the `task` part to run the `default` task.*\n\n## Advanced Use\n\nWhile running `node-debug` is a convenient way to start your debugging\nsession, there may come time when you need to tweak the default setup.\n\nThere are three steps needed to get you up and debugging:\n\n#### 1. Start the Node Inspector server\n\n```sh\n$ node-inspector\n```\n\nYou can leave the server running in background, it's possible to debug\nmultiple processes using the same server instance.\n\n#### 2. Enable debug mode in your Node process\n\nYou can either start Node with a debug flag like:\n\n```sh\n$ node --debug your/node/program.js\n```\n\nor, to pause your script on the first line:\n\n```sh\n$ node --debug-brk your/short/node/script.js\n```\n\nOr you can enable debugging on a node that is already running by sending\nit a signal:\n\n1. Get the PID of the node process using your favorite method.\n`pgrep` or `ps -ef` are good\n\n    ```sh\n    $ pgrep -l node\n    2345 node your/node/server.js\n    ```\n\n2. Send it the USR1 signal\n\n    ```sh\n    $ kill -s USR1 2345\n    ```\n\n##### Windows\n\nWindows does not support UNIX signals. To enable debugging, you can use\nan undocumented API function `process._debugProcess(pid)`:\n\n1. Get the PID of the node process using your favorite method, e.g.\n\n    ```sh\n    > tasklist /FI \"IMAGENAME eq node.exe\"\n\n    Image Name                     PID Session Name        Session#    Mem Usage\n    ========================= ======== ================ =========== ============\n    node.exe                      3084 Console                    1     11,964 K\n    ```\n\n2. Call the API:\n\n    ```sh\n    > node -e \"process._debugProcess(3084)\"\n    ```\n\n#### 3. Load the debugger UI\n\nOpen http://127.0.0.1:8080/?port=5858 in the Chrome browser.\n\n## Configuration\n\nBoth `node-inspector` and `node-debug` use [rc](https://npmjs.org/package/rc) module\nto manage configuration options.\n\nPlaces for configuration:\n* command line arguments (parsed by [yargs](https://github.com/chevex/yargs))\n* environment variables prefixed with ```node-inspector_```\n* if you passed an option ```--config file``` then from that file\n* a local ```.node-inspectorrc``` or the first found looking in ```./ ../ ../../\n ../../../``` etc.\n* ```$HOME/.node-inspectorrc```\n* ```$HOME/.node-inspector/config```\n* ```$HOME/.config/node-inspector```\n* ```$HOME/.config/node-inspector/config```\n* ```/etc/node-inspectorrc```\n* ```/etc/node-inspector/config```\n\nAll configuration sources that where found will be flattened into one object,\nso that sources earlier in this list override later ones.\n\n### Options\n\n| Option | Alias | Default | Description |\n| :------------------ | :-: | :-----: | :-------- |\n| **general**\n| --help              | -h  |         | Display information about available options.<br/>Use `--help -l` to display full usage info.<br/>Use `--help <option>` to display quick help on `option`.\n| --version           | -v  |         | Display Node Inspector's version.\n| --debug-port        | -d  | 5858    | Node/V8 debugger port.<br/>(`node --debug={port}`)\n| --web-host          |     | 0.0.0.0 | Host to listen on for Node Inspector's web interface.<br/>`node-debug` listens on `127.0.0.1` by default.\n| --web-port          | -p  | 8080    | Port to listen on for Node Inspector's web interface.\n| **node-debug**\n| --debug-brk         | -b  | true    | Break on the first line.<br/>(`node --debug-brk`)\n| --nodejs            |     | []      | Pass NodeJS options to debugged process.<br/>(`node --option={value}`)\n| --script            |     | []      | Pass options to debugged process.<br/>(`node app --option={value}`)\n| --cli               | -c  | false   | CLI mode, do not open browser.\n| **node-inspector**\n| --save-live-edit    |     | false   | Save live edit changes to disk (update the edited files).\n| --preload           |     | true    | Preload *.js files. You can disable this option<br/>to speed up the startup.\n| --inject            |     | true    | Enable injection of debugger extensions into the debugged process. It's possible disable only part of injections using subkeys `--no-inject.network`. Allowed keys : `network`, `profiles`, `console`.\n| --hidden            |     | []      | Array of files to hide from the UI,<br/>breakpoints in these files will be ignored.<br/>All paths are interpreted as regular expressions.\n| --stack-trace-limit |     | 50      | Number of stack frames to show on a breakpoint.\n| --ssl-key           |     |         | Path to file containing a valid SSL key.\n| --ssl-cert          |     |         | Path to file containing a valid SSL certificate.\n\n### Usage examples\n\n#### Command line\n##### Format\n```\n$ node-debug [general-options] [node-debug-options] [node-inspector-options] [script]\n```\n\n```\n$ node-inspector [general-options] [node-inspector-options]\n```\n##### Usage\n\nDisplay full usage info:\n```\n$ node-debug --help -l\n```\nSet debug port of debugging process to `5859`:\n```\n$ node-debug -p 5859 app\n```\nPass `--web-host=127.0.0.2` to node-inspector. Start node-inspector to listen on `127.0.0.2`:\n```\n$ node-debug --web-host 127.0.0.2 app\n```\nPass `--option=value` to debugging process:\n```\n$ node-debug app --option value\n```\nStart node-inspector to listen on HTTPS:\n```\n$ node-debug --ssl-key ./ssl/key.pem --ssl-cert ./ssl/cert.pem app\n```\nIgnore breakpoints in files stored in `node_modules` folder or ending in `.test.js`:\n```\n$ node-debug --hidden node_modules/ --hidden \\.test\\.js$ app\n```\nAdd `--harmony` flag to the node process running the debugged script:\n```\n$ node-debug --nodejs --harmony app\n```\nDisable preloading of `.js` files:\n```\n$ node-debug --no-preload app\n```\n\n#### RC Configuration\n\nUse dashed option names in RC files. Sample config file:\n```js\n{\n  \"web-port\": 8088,\n  \"web-host\": null,\n  \"debug-port\": 5858,\n  \"save-live-edit\": true,\n  \"preload\": false,\n  \"hidden\": [\"\\.test\\.js$\", \"node_modules/\"],\n  \"nodejs\": [\"--harmony\"],\n  \"stack-trace-limit\": 50,\n  \"ssl-key\": \"./ssl/key.pem\",\n  \"ssl-cert\": \"./ssl/cert.pem\"\n}\n```\n\n## Contributing Code\n\nMaking Node Inspector the best debugger for node.js cannot be achieved without\nthe help of the community. The following resources should help you to get\nstarted.\n\n* [Contributing](https://github.com/node-inspector/node-inspector/wiki/Contributing)\n* [Developer's Guide](https://github.com/node-inspector/node-inspector/wiki/Developer%27s-Guide)\n* [Easy Picks](https://github.com/node-inspector/node-inspector/issues?direction=asc&labels=Easy+Pick&page=1&sort=updated&state=open)\n\n## Credits\n\nMaintainers\n\n - [Danny Coates](https://github.com/dannycoates) - the original author\n   and a sole maintainer for several years.\n - [Miroslav Bajtoš](https://github.com/bajtos) - a current maintainer,\n   sponsored by [StrongLoop](http://strongloop.com).\n - [3y3](https://github.com/3y3) - a current maintainer\n\nBig thanks to the many contributors to the project, see [AUTHORS](AUTHORS).\n",
  "readmeFilename": "README.md",
  "contributors": [
    {
      "name": "Danny Coates",
      "email": "dannycoates@gmail.com"
    },
    {
      "name": "Miroslav Bajtoš",
      "email": "miroslav@strongloop.com"
    },
    {
      "name": "3y3",
      "email": "3y3@bk.ru"
    },
    {
      "name": "Adam Hořčica",
      "email": "horcicaa@gmail.com"
    },
    {
      "name": "Akzhan Abdulin",
      "email": "akzhan.abdulin@gmail.com"
    },
    {
      "name": "cattail",
      "email": "zhongchiyu@gmail.com"
    },
    {
      "name": "ChrisWren",
      "email": "cthewren@gmail.com"
    },
    {
      "name": "Dave",
      "email": "badave@gmail.com"
    },
    {
      "name": "Vasil Dininski",
      "email": "dininski@gmail.com"
    },
    {
      "name": "Dick Hardt",
      "email": "dickhardt@gmail.com"
    },
    {
      "name": "Gary Katsevman",
      "email": "git@gkatsev.com"
    },
    {
      "name": "Glenn Block",
      "email": "glenn.block@gmail.com"
    },
    {
      "name": "Ionică Bizău",
      "email": "bizauionica@yahoo.com"
    },
    {
      "name": "Ionuț G. Stan",
      "email": "ionut.g.stan@gmail.com"
    },
    {
      "name": "Ivan Baktsheev",
      "email": "dot.and.thing@gmail.com"
    },
    {
      "name": "junecoder",
      "email": "githubposting@gmail.com"
    },
    {
      "name": "Karan Batra-Daitch",
      "email": "karanganesha04@gmail.com"
    },
    {
      "name": "Kasper Ligaard",
      "email": "kasperligaard@gmail.com"
    },
    {
      "name": "Kenneth Auchenberg",
      "email": "kenneth@auchenberg.dk"
    },
    {
      "name": "Lennon Pulda-Grealy",
      "email": "lennon_puldagrealy@apple.com"
    },
    {
      "name": "Mark Constable",
      "email": "markc@renta.net"
    },
    {
      "name": "Matthew O'Riordan",
      "email": "matthew.oriordan@gmail.com"
    },
    {
      "name": "Michael Schoonmaker",
      "email": "michael@strongloop.com"
    },
    {
      "name": "Panagiotis Astithas",
      "email": "pastith@gmail.com"
    },
    {
      "name": "Peter Lyons",
      "email": "pete@peterlyons.com"
    },
    {
      "name": "Peter Flannery",
      "email": "flannery.peter@ntlworld.com"
    },
    {
      "name": "Philip Tellis",
      "email": "philip.tellis@gmail.com"
    },
    {
      "name": "Pritam Baral",
      "email": "pritam@pritambaral.com"
    },
    {
      "name": "Sam Roberts",
      "email": "sam@strongloop.com"
    },
    {
      "name": "Sergey Krilov",
      "email": "serg.kr@gmail.com"
    },
    {
      "name": "ssafejava",
      "email": "s@safejava.com"
    }
  ],
  "bugs": {
    "url": "https://github.com/node-inspector/node-inspector/issues"
  },
  "_id": "node-inspector@0.12.3",
  "_from": "node-inspector@*"
}
